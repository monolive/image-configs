# Build a basic CentOS 6 AMI
lang en_US.UTF-8
keyboard us
timezone US/Eastern
auth --useshadow --enablemd5
selinux --disabled
firewall --disabled
bootloader --timeout=1 
network --bootproto=dhcp --device=eth0 --onboot=on
services --enabled=network


# Uncomment the next line
# to make the root password be password
# By default the root password is emptied
#rootpw password

#
# Define how large you want your rootfs to be
# NOTE: S3-backed AMIs have a limit of 10G
#
part / --size 1024 --fstype ext3 --label cloudimg

#
# Repositories
repo --name=CentOS6-Base --mirrorlist=http://mirrorlist.centos.org/?release=6&arch=$basearch&repo=os
repo --name=CentOS6-Updates --mirrorlist=http://mirrorlist.centos.org/?release=6&arch=$basearch&repo=updates
repo --name=EPEL --mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&arch=$basearch


#
#
# Add all the packages after the base packages
#
%packages --nobase --instLangs=en
@core
system-config-securitylevel-tui
system-config-firewall-base
audit
pciutils
bash
coreutils
kernel
wget
grub
e2fsprogs
passwd
policycoreutils
chkconfig
rootfiles
yum
vim-minimal
acpid
openssh-clients
openssh-server
curl
epel-release
cloud-init
ntp

# Chef bootstrap requirements
ruby
ruby-devel
make
gcc

-*-firmware

#Allow for dhcp access
dhclient
iputils

%end

#
# Add custom post scripts after the base post.
#
%post
%end

# more ec2-ify
%post --erroronfail
# NOTE for maintainers.  The following script is adopted from
# https://github.com/eucalyptus/Eucalyptus-Scripts/blob/master/rc.local
# but every dollar sign and backtick must be escaped here.

cat >> /etc/rc.local <<EOF
#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#

# since ephemeral or swap may not be mounted or on different devices
# (specially on xen) let's look for them. This is fairly hackish.
if ! swapon -s|grep -q partition ; then
  # no swap partition
  for x in /dev/[xvsh]*d[a-z]3; do
    swapon \$x 2> /dev/null
  done
fi
if ! mount | egrep -q '^\/dev\/(\S+)2 ' ; then
  mkdir -p /media/ephemeral0
  if [ -d /media/ephemeral0 ]; then
    if [ -z "\$( ls /media/ephemeral0/* )" ]; then
      # try to mount only if the mount point is empty
      for x in /dev/[xvsh]*d[a-z]2 ; do
        mount \$x /media/ephemeral0 
      done
    fi
  fi
fi

# simple attempt to get the user ssh key using the meta-data service
mkdir -p /root/.ssh
chmod 600 /root/.ssh
echo >> /root/.ssh/authorized_keys
curl --retry 3 --retry-delay 10 -m 45 -s http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key | grep 'ssh-rsa' >> /root/.ssh/authorized_keys
echo "AUTHORIZED_KEYS:"
echo "************************"
cat /root/.ssh/authorized_keys
echo "************************"

# set the hostname to something sensible
META_HOSTNAME="\$( curl -s http://169.254.169.254/latest/meta-data/local-hostname )"
META_IP="\$( curl -s http://169.254.169.254/latest/meta-data/local-ipv4 )"

if [ \${META_HOSTNAME} = \${META_IP} ]; then
        META_HOSTNAME="\$( echo \$META_HOSTNAME | sed -e 's/\./-/g' | xargs -I {} echo "ip-{}" )"
fi

hostname \$META_HOSTNAME
echo >> /etc/hosts
echo "\${META_IP} \${META_HOSTNAME}" >> /etc/hosts

# check if the user-data is a script, and if so execute it
TMP_FILE="/tmp/user-data-\$\$"
curl --retry 3 --retry-delay 10 -m 60 -o \$TMP_FILE http://169.254.169.254/latest/user-data
if [ -s \$TMP_FILE ]; then
  echo "Downloaded user data in \$TMP_FILE"
  if [ "\$( head -c 2 \$TMP_FILE )" = "#!" ]; then
    chmod 700 \$TMP_FILE
    echo "User data is a script: executing it"
    \$TMP_FILE > /root/user-data.out 2>&1
  fi
fi

exit 0
EOF

# disable root password based login
cat >> /etc/ssh/sshd_config << EOF
PermitRootLogin without-password
UseDNS no
EOF

%end

